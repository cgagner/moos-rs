use std::str::FromStr;
use crate::lexers::{Location, TokenRange};
use crate::nsplug::error::PlugParseError;
use crate::nsplug::lexer::{State, Token};
use crate::nsplug::tree::{MacroDefinition, MacroCondition, MacroType, Line};
use lalrpop_util::ErrorRecovery;

//grammar<'input>(input: &'input str);
grammar<'s, 'input>(state: &'s mut State<'input>, input: &'input str);

pub Lines: Vec<Line<'input>> = <Line*>;

pub Line: Line<'input> = {
    MacroDefine => <>,
    MacroInclude => <>,
    //MacroElse => <>,
    //MacroEndif => <>,
    "EOL" => Line::EndOfLine,
    //<comment:"Comment"> => Line::Comment(comment),
    UnknownMacro => <>,
    <l:@L> <variable:"PlugVariable"> => Line::PlugVariable{variable, line: l.line},
    <l:@L> <variable:"PlugUpperVariable"> => Line::PlugUpperVariable{variable, line: l.line},
    ! => { state.errors.push(<>); Line::Error },
}

// TODO: 
//   1. Add MacroIfDef
//   2. Add MacroElseIfDef
//   3. Add MacroIfNotDef


MacroDefine: Line<'input> = {
    <ml:@L> <d:"#define"> <mr:@R> <definition:MacroDefinition> <comment:"Comment"?> "EOL" => 
        Line::Macro{
            macro_type: MacroType::Define{definition, range: TokenRange::new_line(ml,mr).unwrap()}, 
            comment, 
            line: ml.line,
        },
}

MacroDefinition: MacroDefinition<'input> = {
    <name:"ValueString"> " " <value:Value?> => {
        MacroDefinition::new(name, value)
    }
}

MacroElse: Line<'input> = {
    <ml:@L> <d:"#else"> <mr:@R> <l:@L> <extras:Value*> <r:@R> <comment:"Comment"?> "EOL" => {
        if !extras.is_empty() {
            let e = lalrpop_util::ErrorRecovery { 
                error: lalrpop_util::ParseError::User {
                    // TODO: Need to create a more descriptive error
                    error: PlugParseError::new_missing_new_line(l, Location{line: r.line, index: r.index+1})
                },
                dropped_tokens: vec![]
            };
            state.errors.push(e);
            Line::Error
        } else {
            Line::Macro{
                macro_type: MacroType::Else{range: TokenRange::new_line(ml,mr).unwrap()}, 
                comment,
                line: ml.line,
            }
        }
    },
}

MacroEndif: Line<'input> = {
    <ml:@L> <d:"#endif"> <mr:@R> <l:@L> <extras:Value*> <r:@R> <comment:"Comment"?> "EOL" => {
        if !extras.is_empty() {
            let e = lalrpop_util::ErrorRecovery { 
                error: lalrpop_util::ParseError::User {
                    // TODO: Need to create a more descriptive error
                    error: PlugParseError::new_missing_new_line(l, Location{line: r.line, index: r.index+1})
                },
                dropped_tokens: vec![]
            };
            state.errors.push(e);
            Line::Error
        } else {
            Line::Macro{
                macro_type: MacroType::EndIf{range: TokenRange::new_line(ml,mr).unwrap()}, 
                comment,
                line: ml.line,
            }
        }
    },
}

MacroInclude: Line<'input> = {
    <ml:@L> <d:"#include"> <mr:@R> <path:"ValueString"> <l:@L> <extras:Value*> <r:@R> <comment:"Comment"?> "EOL" => {
        if !extras.is_empty() {
            let e = lalrpop_util::ErrorRecovery { 
                error: lalrpop_util::ParseError::User {
                    // TODO: Need to create a more descriptive error
                    error: PlugParseError::new_missing_new_line(l, Location{line: r.line, index: r.index+1})
                },
                dropped_tokens: vec![]
            };
            state.errors.push(e);
            Line::Error
        } else {
            Line::Macro{
                macro_type: MacroType::Include{path, range: TokenRange::new_line(ml,mr).unwrap()}, 
                comment,
                line: ml.line,
            }
        }
    }, 
    <ml:@L> <d:"#include"> <mr:@R> <path:"Quote"> <l:@L> <extras:Value*> <r:@R> <comment:"Comment"?> "EOL" => {
        if !extras.is_empty() {
            let e = lalrpop_util::ErrorRecovery { 
                error: lalrpop_util::ParseError::User {
                    // TODO: Need to create a more descriptive error
                    error: PlugParseError::new_missing_new_line(l, Location{line: r.line, index: r.index+1})
                },
                dropped_tokens: vec![]
            };
            state.errors.push(e);
            Line::Error
        } else {
            Line::Macro{
                macro_type: MacroType::Include{path, range: TokenRange::new_line(ml,mr).unwrap()}, 
                comment,
                line: ml.line,
            }
        }
    }, 
}

UnknownMacro: Line<'input> = {
     <l:@L> <m:"#unknown"> => {
        let e = lalrpop_util::ErrorRecovery { 
                error: lalrpop_util::ParseError::User {
                    error: PlugParseError::new_unknown_macro(l, m)
                },
                dropped_tokens: vec![]
            };
        state.errors.push(e);
        Line::Error
    }
}

Value: crate::nsplug::tree::Value<'input> = {
    <l:@L> <value:"bool"> <r:@R> => crate::nsplug::tree::Value::Boolean(value.0, value.1, TokenRange::new_line(l,r).expect("Invalid token range while parsing `Value`")),
    <l:@L> <value:"int"> <r:@R> => crate::nsplug::tree::Value::Integer(value.0, value.1, TokenRange::new_line(l,r).expect("Invalid token range while parsing `Value`")),
    <l:@L> <value:"float"> <r:@R> => crate::nsplug::tree::Value::Float(value.0, value.1, TokenRange::new_line(l,r).expect("Invalid token range while parsing `Value`")),
    <l:@L> <value:"ValueString"> <r:@R> => crate::nsplug::tree::Value::String(value, TokenRange::new_line(l,r).expect("Invalid token range while parsing `Value`")),
    <l:@L> <value:"Quote"> <r:@R> => crate::nsplug::tree::Value::String(value, TokenRange::new_line(l,r).expect("Invalid token range while parsing `Value`")),
    <l:@L> <value:"PlugVariable"> <r:@R> => crate::nsplug::tree::Value::PlugVariable(value, TokenRange::new_line(l,r).expect("Invalid token range while parsing `Value`")),
    <l:@L> <value:"PlugUpperVariable"> <r:@R> => crate::nsplug::tree::Value::PlugUpperVariable(value, TokenRange::new_line(l,r).expect("Invalid token range while parsing `Value`")),
    <l:@L> <value:"PartialPlugVariable"> <r:@R> => crate::nsplug::tree::Value::PartialPlugVariable(value, TokenRange::new_line(l,r).expect("Invalid token range while parsing `Value`")),
    <l:@L> <value:"PartialPlugUpperVariable"> <r:@R> => crate::nsplug::tree::Value::PartialPlugUpperVariable(value, TokenRange::new_line(l,r).expect("Invalid token range while parsing `Value`")),
}

// ---------------------------------------------------------------------------
// Token Definitions 
// ---------------------------------------------------------------------------

extern {  
    type Location = crate::lexers::Location;
    type Error = PlugParseError<'input>;
    
    enum Token<'input> {
        "Comment" => Token::Comment(<&'input str>),
        "Quote" => Token::Quote(<&'input str>),
        "PartialQuote" => Token::PartialQuote(<&'input str>, <char>),
        "ValueString" => Token::ValueString(<&'input str>),
        "EOL" => Token::EOL,
        "PlugVariable" => Token::PlugVariable(<&'input str>),
        "PartialPlugVariable" => Token::PartialPlugVariable(<&'input str>),
        "PlugUpperVariable" => Token::PlugUpperVariable(<&'input str>),
        "PartialPlugUpperVariable" => Token::PartialPlugUpperVariable(<&'input str>),
        "int" => Token::Integer(<i64>, <&'input str>),
        "float" => Token::Float(<f64>, <&'input str>),
        "bool" => Token::Boolean(<bool>, <&'input str>),
        "#define" => Token::MacroDefine,
        "#else" => Token::MacroElse,
        "#elseifdef" => Token::MacroElseIfDef,
        "#endif" => Token::MacroEndIf,
        "#ifdef" => Token::MacroIfDef,
        "#ifndef" => Token::MacroIfNotDef,
        "#include" => Token::MacroInclude,
        "#unknown" => Token::UnknownMacro(<&'input str>),
        "||" => Token::OrOperator,
        "&&" => Token::AndOperator,
        " " => Token::Space,
    }
}
